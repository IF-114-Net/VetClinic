// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VetClinic.DAL;

namespace VetClinic.DAL.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20210128121931_Fix_fluentAPI_for_Services")]
    partial class Fix_fluentAPI_for_Services
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(32)")
                        .HasMaxLength(32);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(32)")
                        .HasMaxLength(32);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "542636ae-953e-4e04-a7de-7533f25af173",
                            ConcurrencyStamp = "daf4c74a-6978-42d8-8583-073e937ab568",
                            Name = "client",
                            NormalizedName = "CLIENT"
                        },
                        new
                        {
                            Id = "e65dd8e1-34f8-4e9d-b535-3b03dde2500e",
                            ConcurrencyStamp = "b7d356de-1a1f-40b8-bea1-0c79af512823",
                            Name = "doctor",
                            NormalizedName = "DOCTOR"
                        },
                        new
                        {
                            Id = "9149c77e-5c15-416a-9bed-e361330feb92",
                            ConcurrencyStamp = "3b041468-a503-44ee-b977-5028590c28f9",
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "ced370e3-1401-4190-9960-ab5bf41f162e",
                            ConcurrencyStamp = "bde816ed-fa5d-4bb4-887b-7ac08f8bd0ad",
                            Name = "accountant",
                            NormalizedName = "ACCOUNTANT"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(300)")
                        .HasMaxLength(300);

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(12)")
                        .HasMaxLength(12);

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("VetClinic.DAL.Entities.Animal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<int>("AnimalTypeId")
                        .HasColumnType("int");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.HasKey("Id");

                    b.HasIndex("AnimalTypeId");

                    b.HasIndex("ClientId");

                    b.ToTable("Animals");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Age = 342,
                            AnimalTypeId = 7,
                            ClientId = 3,
                            Name = "Pushok"
                        },
                        new
                        {
                            Id = 2,
                            Age = 3,
                            AnimalTypeId = 2,
                            ClientId = 1,
                            Name = "Ruzhuk"
                        },
                        new
                        {
                            Id = 3,
                            Age = 5,
                            AnimalTypeId = 1,
                            ClientId = 2,
                            Name = "Sirko"
                        },
                        new
                        {
                            Id = 4,
                            Age = 12,
                            AnimalTypeId = 3,
                            ClientId = 4,
                            Name = "Biznes"
                        },
                        new
                        {
                            Id = 5,
                            Age = 4,
                            AnimalTypeId = 4,
                            ClientId = 4,
                            Name = "Hmarochos"
                        },
                        new
                        {
                            Id = 6,
                            Age = 1,
                            AnimalTypeId = 6,
                            ClientId = 1,
                            Name = "Krug"
                        },
                        new
                        {
                            Id = 7,
                            Age = 1,
                            AnimalTypeId = 5,
                            ClientId = 3,
                            Name = "Dzvin"
                        },
                        new
                        {
                            Id = 8,
                            Age = 2,
                            AnimalTypeId = 2,
                            ClientId = 1,
                            Name = "Robin"
                        });
                });

            modelBuilder.Entity("VetClinic.DAL.Entities.AnimalType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AnimalTypeName")
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.ToTable("AnimalTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AnimalTypeName = "Pes dvorovuy"
                        },
                        new
                        {
                            Id = 2,
                            AnimalTypeName = "Kit Domashniy"
                        },
                        new
                        {
                            Id = 3,
                            AnimalTypeName = "Slon"
                        },
                        new
                        {
                            Id = 4,
                            AnimalTypeName = "Zhuraph"
                        },
                        new
                        {
                            Id = 5,
                            AnimalTypeName = "Zolota Rubka"
                        },
                        new
                        {
                            Id = 6,
                            AnimalTypeName = "Homyak"
                        },
                        new
                        {
                            Id = 7,
                            AnimalTypeName = "Monster"
                        });
                });

            modelBuilder.Entity("VetClinic.DAL.Entities.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AnimalId")
                        .HasColumnType("int");

                    b.Property<DateTime>("AppointmentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Complaints")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int?>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(3);

                    b.Property<string>("TreatmentDescription")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.HasIndex("AnimalId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("ServiceId");

                    b.HasIndex("StatusId");

                    b.ToTable("Appointments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AnimalId = 1,
                            AppointmentDate = new DateTime(2020, 5, 1, 8, 30, 0, 0, DateTimeKind.Unspecified),
                            Complaints = "Temperature",
                            DoctorId = 1,
                            ServiceId = 1,
                            StatusId = 2,
                            TreatmentDescription = "Drink more wather"
                        },
                        new
                        {
                            Id = 2,
                            AnimalId = 2,
                            AppointmentDate = new DateTime(2020, 4, 23, 9, 30, 0, 0, DateTimeKind.Unspecified),
                            Complaints = "Bad wool",
                            DoctorId = 3,
                            ServiceId = 2,
                            StatusId = 3,
                            TreatmentDescription = "Use animal shampoo"
                        },
                        new
                        {
                            Id = 3,
                            AnimalId = 3,
                            AppointmentDate = new DateTime(2020, 1, 12, 10, 30, 0, 0, DateTimeKind.Unspecified),
                            Complaints = "Required castration",
                            DoctorId = 2,
                            ServiceId = 4,
                            StatusId = 4,
                            TreatmentDescription = "wear a collar for 12 days"
                        },
                        new
                        {
                            Id = 4,
                            AnimalId = 4,
                            AppointmentDate = new DateTime(2019, 5, 14, 11, 30, 0, 0, DateTimeKind.Unspecified),
                            Complaints = "Spa procedure",
                            DoctorId = 3,
                            ServiceId = 2,
                            StatusId = 1,
                            TreatmentDescription = "Spa every weak"
                        },
                        new
                        {
                            Id = 5,
                            AnimalId = 5,
                            AppointmentDate = new DateTime(2019, 11, 15, 12, 30, 0, 0, DateTimeKind.Unspecified),
                            Complaints = "Need consultation",
                            DoctorId = 3,
                            ServiceId = 1,
                            StatusId = 4,
                            TreatmentDescription = "Pay more attention"
                        },
                        new
                        {
                            Id = 6,
                            AnimalId = 6,
                            AppointmentDate = new DateTime(2019, 2, 2, 9, 30, 0, 0, DateTimeKind.Unspecified),
                            Complaints = "Vaccination",
                            DoctorId = 2,
                            ServiceId = 1,
                            StatusId = 3,
                            TreatmentDescription = ""
                        },
                        new
                        {
                            Id = 7,
                            AnimalId = 7,
                            AppointmentDate = new DateTime(2020, 12, 12, 12, 30, 0, 0, DateTimeKind.Unspecified),
                            Complaints = "Sore spine",
                            DoctorId = 2,
                            ServiceId = 1,
                            StatusId = 2,
                            TreatmentDescription = "daily walk"
                        },
                        new
                        {
                            Id = 8,
                            AnimalId = 8,
                            AppointmentDate = new DateTime(2020, 3, 30, 10, 30, 0, 0, DateTimeKind.Unspecified),
                            Complaints = "Paw fracture",
                            DoctorId = 2,
                            ServiceId = 3,
                            StatusId = 1,
                            TreatmentDescription = "daily bandage change"
                        });
                });

            modelBuilder.Entity("VetClinic.DAL.Entities.AppointmentProcedures", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AppointmentId")
                        .HasColumnType("int");

                    b.Property<int>("ProcedureId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("ProcedureId");

                    b.ToTable("AppointmentProcedures");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppointmentId = 1,
                            ProcedureId = 1
                        },
                        new
                        {
                            Id = 2,
                            AppointmentId = 2,
                            ProcedureId = 2
                        },
                        new
                        {
                            Id = 3,
                            AppointmentId = 3,
                            ProcedureId = 3
                        },
                        new
                        {
                            Id = 4,
                            AppointmentId = 4,
                            ProcedureId = 4
                        },
                        new
                        {
                            Id = 5,
                            AppointmentId = 5,
                            ProcedureId = 5
                        },
                        new
                        {
                            Id = 6,
                            AppointmentId = 6,
                            ProcedureId = 3
                        },
                        new
                        {
                            Id = 7,
                            AppointmentId = 7,
                            ProcedureId = 5
                        },
                        new
                        {
                            Id = 8,
                            AppointmentId = 7,
                            ProcedureId = 4
                        },
                        new
                        {
                            Id = 9,
                            AppointmentId = 8,
                            ProcedureId = 4
                        },
                        new
                        {
                            Id = 10,
                            AppointmentId = 1,
                            ProcedureId = 3
                        });
                });

            modelBuilder.Entity("VetClinic.DAL.Entities.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Clients");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            UserId = "4"
                        },
                        new
                        {
                            Id = 2,
                            UserId = "5"
                        },
                        new
                        {
                            Id = 3,
                            UserId = "6"
                        },
                        new
                        {
                            Id = 4,
                            UserId = "7"
                        });
                });

            modelBuilder.Entity("VetClinic.DAL.Entities.Doctor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Biography")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Education")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Experience")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PositionId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("PositionId");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Doctors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Education = "Gas and Oil",
                            Experience = "2",
                            PositionId = 1,
                            UserId = "1"
                        },
                        new
                        {
                            Id = 2,
                            Education = "IfMedical",
                            Experience = "7",
                            PositionId = 3,
                            UserId = "2"
                        },
                        new
                        {
                            Id = 3,
                            Education = "SelfEducation",
                            Experience = "3",
                            PositionId = 4,
                            UserId = "3"
                        });
                });

            modelBuilder.Entity("VetClinic.DAL.Entities.Position", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("PositionName")
                        .HasColumnType("nvarchar(40)")
                        .HasMaxLength(40);

                    b.Property<decimal>("Salary")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Positions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            PositionName = "Вirector",
                            Salary = 100000m
                        },
                        new
                        {
                            Id = 2,
                            PositionName = "Сleaner",
                            Salary = 10000m
                        },
                        new
                        {
                            Id = 3,
                            PositionName = "Veterinarian",
                            Salary = 500m
                        },
                        new
                        {
                            Id = 4,
                            PositionName = "Stylist",
                            Salary = 1000m
                        });
                });

            modelBuilder.Entity("VetClinic.DAL.Entities.Procedure", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ProcedureName")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Procedures");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Best for your pet",
                            Price = 1000m,
                            ProcedureName = "SPA procedure"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Paw fracture",
                            Price = 2000m,
                            ProcedureName = "Operation"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Pet inspection",
                            Price = 50m,
                            ProcedureName = "Examination of animal"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Bad operation",
                            Price = 240m,
                            ProcedureName = "Сastration"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Doctor Consultation about care and maintenance of the animal",
                            Price = 100m,
                            ProcedureName = "Consultation"
                        });
                });

            modelBuilder.Entity("VetClinic.DAL.Entities.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(2000)")
                        .HasMaxLength(2000);

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Services");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Basic medical examination of your animal by a fully equipped modern operating theatre and a pharmacy room. Our dental units provide facilities for all normal veterinary procedures. Diagnostic and surgical facilities include x-ray, ultrasound, electrocardiography, Doppler blood pressure, and a range of diagnostic endoscopes.",
                            ServiceName = "Inspection"
                        },
                        new
                        {
                            Id = 2,
                            Description = "We vaccinate and give booster inoculations according to an individual’s life style. We can do antibody titre tests to see if a dog actually needs a booster inoculation but rather than use in house antibody tests (that can produce false negatives), we use the gold standard and send all blood samples to the DEFRA approved specialist diagnostic laboratory used for rabies antibody titre analysis.",
                            ServiceName = "Vacination"
                        },
                        new
                        {
                            Id = 3,
                            Description = @"During regular hospital hours, vet clinic can provide urgent care assistance. We will partner with you to determine whether referral to a specialty or emergency hospital is in your pet’s best interest. Depending on your pet’s individual needs and hospital capacity, assistance may consist of: 
                                                                Urgent care stabilization;
                                                                Referrals to specialty or emergency hospitals;
                                                                Laboratory testing and x-rays;
                                                                IV fluid therapy, pain control, infection treatments;
                                                                Wound and fracture care;
                                                                Treatment for poisonings or seizures",
                            ServiceName = "Urgently"
                        },
                        new
                        {
                            Id = 4,
                            Description = "The anaesthetics and drugs we use during surgery together with the methods we use to monitor vital signs are comparable to those used for us when we have hospital operations. Continuous monitoring includes blood pressure, electrocardiogram, oxygen saturation, carbon dioxide levels, and ventilation. With the skill of our staff, it is ‘normal’ for us to successfully operate on very old, very sick animals that have a multitude of medical problems. While we never take the administration of a general anaesthetic casually, anaesthetic complications are rare despite the sometimes severe nature of the problems we manage.",
                            ServiceName = "Surgery"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Internal medicine services cover hormonal, gastrointestinal, urinary, haematologic (blood related), respiratory, infectious, and immune-mediated diseases. The facilities at the London Veterinary Clinic are co-ordinated by Grant Petrie. In addition to an extensive review of your pet’s medical history, diagnostics always begin with a thorough physical examination and blood tests. When more information is needed, ultrasound, radiography, endoscopy, and CT imaging may be used. Our objective is to make an accurate diagnosis as rapidly as possible while at the same time putting your pet (and you) to a minimum of inconvenience.",
                            ServiceName = "Internal Medicine"
                        },
                        new
                        {
                            Id = 6,
                            Description = "We focus on preventive veterinary care to promote and improve overall pet health. Routine check-ups allow us to diagnose, treat and protect your pet from contracting serious, costly and sometimes fatal diseases. Offering a holistic approach to pet health, we partner with our clients to make sure their pets receive proper preventive",
                            ServiceName = "Preventive Care"
                        },
                        new
                        {
                            Id = 7,
                            Description = "Cardiology services are provided by Grant Petrie. In addition to an extensive medical history review, a consultation may include echocardiography, electrocardiography, radiography, blood pressure monitoring and 24 hour Holter monitoring to evaluate the cardiac status of your pet.",
                            ServiceName = "Cardiology"
                        },
                        new
                        {
                            Id = 8,
                            Description = "We will take a full medical history and may take an ear or skin swab or skin scrapings to help with the diagnosis. In rare and unusual skin conditions a skin biopsy may be needed. For allergic skin conditions exclusion diets are often recommended and allergy testing for inhaled allergies (pollens, moulds, dust mites etc) is done on blood samples sent to a specialist laboratory in The Netherlands. We have specialist referral veterinary dermatologist available for the most challenging cases.",
                            ServiceName = "Dermatology"
                        },
                        new
                        {
                            Id = 9,
                            Description = "Your pet's oral health is a good indicator of their overall health. Your pet's teeth should be checked at least once a year for early signs of problems. Our hospitals offer anesthetized dental cleanings and procedures.",
                            ServiceName = "Dental Care"
                        },
                        new
                        {
                            Id = 10,
                            Description = "Among the most useful tools we use to evaluate a pet’s condition is diagnostic imaging. This includes radiographs (x-rays) and ultrasonography (ultrasound) both of which are carried out at York Street. We are able to refer pets for other forms of imaging if needed, this may include computed tomography (CT scans) and magnetic resonance imaging (MRI scans). Each of these provides different kinds of images, and in some instances more than one may be suggested by us to evaluate a particular problem in your pet. All of these methods provide ‘pictures’ of internal structures.",
                            ServiceName = "Diagnostic Imaging"
                        });
                });

            modelBuilder.Entity("VetClinic.DAL.Entities.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.ToTable("Statuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            StatusName = "Approved"
                        },
                        new
                        {
                            Id = 2,
                            StatusName = "Disapproved"
                        },
                        new
                        {
                            Id = 3,
                            StatusName = "Processing"
                        },
                        new
                        {
                            Id = 4,
                            StatusName = "Completed"
                        });
                });

            modelBuilder.Entity("VetClinic.DAL.Entities.User", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.HasDiscriminator().HasValue("User");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "413ca0a0-b960-4e2b-a719-cce4b68d1ead",
                            Email = "KolesoAnastasiya@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumber = "0984112333",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c3cc1978-c181-44cb-946d-7ca1dace3ae0",
                            TwoFactorEnabled = false,
                            UserName = "Koleso Anastasiya",
                            FirstName = "Anastasiya",
                            LastName = "Koleso"
                        },
                        new
                        {
                            Id = "2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0fa64668-d1db-431c-a6a2-13ce8fbb6a22",
                            Email = "NazarenkoOleh@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumber = "0954453374",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f5f784bf-9b40-46d2-9c3a-905171150ca7",
                            TwoFactorEnabled = false,
                            UserName = "Nazarenko Oleh",
                            FirstName = "Oleh",
                            LastName = "Nazarenko"
                        },
                        new
                        {
                            Id = "3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4f4cef11-e6e3-4065-8adf-9f68da20d90f",
                            Email = "NoorkovaShuba@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumber = "0934453214",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f75eff4e-63f7-4df7-90eb-758e2f85e189",
                            TwoFactorEnabled = false,
                            UserName = "Noorkova Shuba",
                            FirstName = "Shuba",
                            LastName = "Noorkova"
                        },
                        new
                        {
                            Id = "4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "48327729-c171-4a8b-89b0-5fe0ad9114f5",
                            Email = "VozniyAndriy@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumber = "0931412622",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0a782e75-d812-48fe-a1d7-6224edbe01e7",
                            TwoFactorEnabled = false,
                            UserName = "Vozniy Andriy",
                            FirstName = "Andriy",
                            LastName = "Vozniy"
                        },
                        new
                        {
                            Id = "5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "07b04ba6-566f-49b9-97c0-92ad28997987",
                            Email = "KosovichMaruna@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumber = "0681236324",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "007433ed-9903-4b34-9573-51e00a866d62",
                            TwoFactorEnabled = false,
                            UserName = "Kosovich Maruna",
                            FirstName = "Maruna",
                            LastName = "Kosovich"
                        },
                        new
                        {
                            Id = "6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f8e14719-9c64-442a-9ed9-dc7163712cbc",
                            Email = "WernudubIvan@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumber = "0982123654",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e27a6a96-6199-4938-b66e-211bc2e3aa10",
                            TwoFactorEnabled = false,
                            UserName = "Wernudub Ivan",
                            FirstName = "Ivan",
                            LastName = "Wernudub"
                        },
                        new
                        {
                            Id = "7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "72cc948d-9e95-49e8-b63d-38f0062e391d",
                            Email = "MukolenkoNadiya@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumber = "0982131254",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a183a647-2492-4a90-8add-9bdb29c48a20",
                            TwoFactorEnabled = false,
                            UserName = "Mukolenko Nadiya",
                            FirstName = "Nadiya",
                            LastName = "Mukolenko"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VetClinic.DAL.Entities.Animal", b =>
                {
                    b.HasOne("VetClinic.DAL.Entities.AnimalType", "AnimalType")
                        .WithMany("Animals")
                        .HasForeignKey("AnimalTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VetClinic.DAL.Entities.Client", "Client")
                        .WithMany("Animals")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VetClinic.DAL.Entities.Appointment", b =>
                {
                    b.HasOne("VetClinic.DAL.Entities.Animal", "Animal")
                        .WithMany("Appointments")
                        .HasForeignKey("AnimalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VetClinic.DAL.Entities.Doctor", "Doctor")
                        .WithMany("Appointments")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("VetClinic.DAL.Entities.Service", "Service")
                        .WithMany("Appointments")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VetClinic.DAL.Entities.Status", "Status")
                        .WithMany("Appointments")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VetClinic.DAL.Entities.AppointmentProcedures", b =>
                {
                    b.HasOne("VetClinic.DAL.Entities.Appointment", "Appointment")
                        .WithMany("AppointmentProcedures")
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VetClinic.DAL.Entities.Procedure", "Procedure")
                        .WithMany("AppointmentProcedures")
                        .HasForeignKey("ProcedureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VetClinic.DAL.Entities.Client", b =>
                {
                    b.HasOne("VetClinic.DAL.Entities.User", "User")
                        .WithOne("Client")
                        .HasForeignKey("VetClinic.DAL.Entities.Client", "UserId");
                });

            modelBuilder.Entity("VetClinic.DAL.Entities.Doctor", b =>
                {
                    b.HasOne("VetClinic.DAL.Entities.Position", "Position")
                        .WithMany("Doctors")
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("VetClinic.DAL.Entities.User", "User")
                        .WithOne("Doctor")
                        .HasForeignKey("VetClinic.DAL.Entities.Doctor", "UserId");
                });
#pragma warning restore 612, 618
        }
    }
}
